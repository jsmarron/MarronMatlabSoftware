disp('Running MATLAB script file CDMpcaMAtesst.m') ;
%
%    FOR DEVELOPMENT AND TESTING OF MATLAB FUNCTION CDMpcaMA,
%    Makoto Aoshima's CDM variation of PCA

itest = 2 ;     %  1,2,...,2



figure(1) ;
clf ;


if itest == 1 ;   %  Simple 2-d example to get started

  seed = 345102984 ;
  rng(seed,'twister') ;
  n = 50 ;
  mdata = 4 + randn(1,n) ;
  mdata = [mdata; (0.7 * (mdata - 4) + 3) + 0.3 * randn(1,n)] ;

  %  First plot raw data
  %
  figure(1) ;
  clf ;
  titlecellstr = {{'Simple 2-d Toy Example' 'Raw Data View'}} ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',0, ...
                       'titlecellstr',titlecellstr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,eye(2),paramstruct) ;

  %  Plot conventional PCA
  %
  figure(2) ;
  clf ;
  titlecellstr = {{'Simple 2-d Toy Example' 'Conventional PC View'}} ;
  paramstruct = struct('npcadiradd',2, ...
                       'irecenter',0, ...
                       'titlecellstr',titlecellstr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,[],paramstruct) ;

  %  Run CDM software
  %
  [eigvec, score, eigval, order] = CDMpcaMA(mdata) ;
  disp('Check Output Values') ;
  eigvec
  score
  eigval
  order
  disp('Check lengths of eigenvectors') ;
  eigvec(:,1)' * eigvec(:,1)
  eigvec(:,2)' * eigvec(:,2)
  disp('Check inner product of eigenvectors') ;
  eigvec(:,1)' * eigvec(:,2)
  disp('Check angle between eigenvectors') ;
  acos(eigvec(:,1)' * eigvec(:,2)) * 180 / pi
  

  %  Plot CDM scores
  %
  figure(3) ;
  clf ;
  titlecellstr = {{'Simple 2-d Toy Example' 'CDM Scores View'}} ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',0, ...
                       'titlecellstr',titlecellstr, ...
                       'iscreenwrite',1) ;
  scatplotSM(score,eye(2),paramstruct) ;


  %  Plot projections onto CDM eigendirections
  %
  figure(4) ;
  clf ;
  titlecellstr = {{'Simple 2-d Toy Example' 'Proj''s onto CDM Eigenvectors'}} ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',0, ...
                       'titlecellstr',titlecellstr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,eigvec,paramstruct) ;



elseif itest == 2 ;   %  PCA vs. SVD 2-d example 

  seed = 345102984 ;
  rng(seed,'twister') ;
  n = 50 ;
  mdata = 10 + 0.2 * randn(1,n) ;
  mdata = [mdata; (20 + 5 * randn(1,n))] ;
  basesavestr = ['CDMpcaMAit' num2str(itest)] ;


  %  Sort data, and use rainbow colors, for easier interpretation
  %
  [temp,viorder] = sort(mdata(2,:)) ;
  mdata = mdata(:,viorder) ;

  %  First plot raw data
  %
  figure(1) ;
  clf ;
  maxlim = [[0 35]; ...
            [0 35]] ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'Zoomed Out View'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Raw Data View'}} ;
  savestr = [basesavestr 'p1RawZoomOut'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',0, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'maxlim',maxlim, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,eye(2),paramstruct) ;

  figure(2) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'Standard Zoom'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Raw Data View'}} ;
  savestr = [basesavestr 'p2RawZoomIn'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',0, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,eye(2),paramstruct) ;

  %  Plot conventional PCA
  %
  figure(3) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'No Centering'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Conventional PC View'}} ;
  savestr = [basesavestr 'p3ConvPCA-NoCenter'] ;
  paramstruct = struct('npcadiradd',2, ...
                       'irecenter',0, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,[],paramstruct) ;

  figure(4) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'Re-Centered'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Conventional PC View'}} ;
  savestr = [basesavestr 'p4ConvPCA-ReCenter'] ;
  paramstruct = struct('npcadiradd',2, ...
                       'irecenter',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,[],paramstruct) ;

  %  Run CDM software
  %
  [eigvec, score, eigval, order] = CDMpcaMA(mdata) ;
  disp('Check Output Values') ;
  eigvec
  score
  eigval
  order
  disp('Check lengths of eigenvectors') ;
  eigvec(:,1)' * eigvec(:,1)
  eigvec(:,2)' * eigvec(:,2)
  disp('Check inner product of eigenvectors') ;
  eigvec(:,1)' * eigvec(:,2)
  disp('Check angle between eigenvectors') ;
  acos(eigvec(:,1)' * eigvec(:,2)) * 180 / pi
  

  %  Plot CDM scores
  %
  figure(5) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'No Centering'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'CDM Scores View'}} ;
  savestr = [basesavestr 'p5CDMpca-Scores'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',0, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(score,eye(2),paramstruct) ;


  %  Now plot BOTH CDM scores and PCA scores, to get feeling
  %  for which reversals make sense
  %
  paramstruct = struct('npc',2, ...
                       'iorient',3, ...
                       'iscreenwrite',1, ...
                       'viout', [0 1]) ;
  outstruct = pcaSM(mdata,paramstruct) ;
  PCAeigvec = getfield(outstruct,'meigvec')
  figure(6) ;
  clf ;
  legendcellstr = {{'CDM2 Score' 'Coventional PC2 score'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Compare CDM2 & PC2 scores'}} ;
  savestr = [basesavestr 'p6CDM2vPCA2scoresReCenter'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM([score(2,:); mdata], ...
             [[1; zeros(2,1)] [0; PCAeigvec(:,2)]], ...
             paramstruct) ;


  %  Reverse CDM score 2
  %
  figure(7) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] ...
                     '2nd CDM Reversed - Re-Centered'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'CDM Scores, 2 Reversed'}} ;
  savestr = [basesavestr 'p7CDMpca-Scores-2Rev'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',0, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(score,[[1 0]; [0 -1]],paramstruct) ;


  %  Plot projections onto CDM eigendirections
  %
  figure(8) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'Re-Centered'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Proj''s onto CDM Eigenvectors'}} ;
  savestr = [basesavestr 'p8CDMpca-ProjReCenter'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,eigvec,paramstruct) ;


  %  Now plot BOTH CDM scores and projections on CDM eigenvectors, to get feeling
  %  for which reversals make sense
  %
  figure(9) ;
  clf ;
  legendcellstr = {{'CDM2 Score' 'CDM eigvec2 projections'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Compare CDM2 & PC2 scores'}} ;
  savestr = [basesavestr 'p9CDM2vCDM2ProjReCenter'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM([score(2,:); mdata], ...
             [[1; zeros(2,1)] [0; eigvec(:,2)]], ...
             paramstruct) ;


  %  Now plot BOTH PCA scores and projections on CDM eigenvectors, to get feeling
  %  for which reversals make sense
  %
  figure(10) ;
  clf ;
  legendcellstr = {{'CDM eigvec2 projections' 'PC2 Scores'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Compare CDM2 & PC2 scores'}} ;
  savestr = [basesavestr 'p10CDM2projvPCA2ReCenter'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',1, ...
                       'iforcenaivesp',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata, ...
             [eigvec(:,2) PCAeigvec(:,2)], ...
             paramstruct) ;


  %  Plot projections onto CDM eigendirections
  %
  figure(11) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'Re-Centered CDM Proj''ns, 2 Rev''d'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Proj''s onto CDM Eigenvectors, 2 Reversed'}} ;
  savestr = [basesavestr 'p11CDMpca-Proj2ReCenter-2Rev'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,[eigvec(:,1) -eigvec(:,2)],paramstruct) ;



%{

  figure(8) ;
  clf ;
  legendcellstr = {{['n = ' num2str(n) ' d = 2, Gaussian'] 'Re-Centered'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Proj''s onto CDM Eigenvectors'}} ;
  savestr = [basesavestr 'p8CDMpca-ProjReCenter'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM(mdata,eigvec,paramstruct) ;


  %  Now plot BOTH scores and projs on eigenvectors, to get feeling
  %  for which reverslas make sense
  %
  figure(9) ;
  clf ;
  legendcellstr = {{'CDM Scores' 'Projections onto CDM Eigenvector'}} ;
  titlecellstr = {{'PCA vs. SVD 2-d Toy Example' 'Compare CDM Proj''s & Scores'}} ;
  savestr = [basesavestr 'p9CDMscores-ProjReCenter'] ;
  paramstruct = struct('npcadiradd',0, ...
                       'irecenter',1, ...
                       'icolor',2, ...
                       'datovlaymax',0.58, ...
                       'datovlaymin',0.42, ...
                       'legendcellstr',legendcellstr, ...
                       'titlecellstr',titlecellstr, ...
                       'savestr',savestr, ...
                       'iscreenwrite',1) ;
  scatplotSM([score(1:2,:); mdata], ...
             [[eye(2) zeros(2,2)]; [zeros(2,2) eigvec]], ...
             paramstruct) ;

%}

end ;    %  of itest if-block


